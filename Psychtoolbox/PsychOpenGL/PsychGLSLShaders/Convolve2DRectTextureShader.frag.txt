/* Generic 2D convolution fragment shader for 2D rectangle textures.
// OpenGL program has to setup the Offset-Array with
// (dx,dy) offsets for sampling locations in the input rectangle
// texture. It also has to setup the KernelValue-Array with the
// weight values for each sample. Offset+KernelValue uniquely
// define a specific type of 2D convolution filter.
//             kernelvalue = texture2DRect(Kernel, vec2(dx + 0.5 + KernelHalfWidth, dy + 0.5 + KernelHalfWidth));
// The filter is of fixed size 'KernelSize':
// (w)2006 by Mario Kleiner.
*/

#version 110
#extension texture_rectangle : require

uniform float KernelHalfWidth;
uniform sampler2DRect Image;
uniform sampler2DRect Kernel;

void main()
{
    int dx, dy;
    vec4 sum = vec4(0.0);
    vec4 tmp;
    float kernelvalue;

    for (dy = -KernelHalfWidth; dy <= KernelHalfWidth; dy++) {
        for (dx = -KernelHalfWidth; dx <= KernelHalfWidth; dx++) {
            kernelvalue = texture2DRect(Kernel, vec2(dx + 0.5 + KernelHalfWidth, dy + 0.5 + KernelHalfWidth));
            tmp = texture2DRect(Image, gl_TexCoord[0].st + vec2(dx + 0.5, dy + 0.5));
            sum += tmp * kernelvalue;
        }
    }

    gl_FragColor = sum;
}
