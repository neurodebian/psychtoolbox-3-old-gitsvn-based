% Short MATLAB example program to demonstrate the use of events% with the Eyelink and Psychophysics Toolboxes. When subject gazes at an object% it changes color. When gaze moves away, it toggles back%	% history% 28-10-02	fwc	created it, based on eyelinkexample% 27-11-02	fwc	changed dialog for dummy mode question, fixed dodriftcorrection bug% Initialization of the connection with the Eyelink Gazetracker.% exit program if this fails.clear all;initializedummy=1;if initializedummy~=1	if eyelink('initialize') ~= 0		if 1==dummymodedlg			eyelink('initializedummy');		else			return;		end	endelse	eyelink('initializedummy');end% Open a graphics window on the main screen% using the PsychToolbox's SCREEN function.screennr = 0; % use main screen[window, screenRect]=SCREEN(screennr,'OpenWindow', 0);white=WhiteIndex(window);black=BlackIndex(window);gray=round((black+white)/2);SCREEN(window, 'FillRect',gray);buffer=screen(window, 'openoffscreenwindow', gray);altbuffer=screen(window, 'openoffscreenwindow', gray);% draw a stimuluscols=5;rows=4;nobjects=cols*rows;[w,h]=windowsize(window);[x,y]=windowcenter(window);fontsize=round(w/100*10);Screen(window,'TextFont','Arial');Screen(buffer,'TextFont','Arial');Screen(altbuffer,'TextFont','Arial');Screen(window,'TextSize',fontsize);Screen(buffer,'TextSize',fontsize);Screen(altbuffer,'TextSize',fontsize);k=1;xdist=round(w/cols);ydist=round(h/rows);x0=x-((cols-1)/2)*xdist;y0=y-((rows-1)/2)*ydist+0.35*fontsize;for i=1:rows	for j=1:cols		text=num2str(k);		width=Screen(buffer,'TextWidth',text);		xpos=round(x0+(j-1)*xdist-width/2);		ypos=round(y0+(i-1)*ydist);		Screen(buffer,'DrawText',text,xpos,ypos,white);		Screen(altbuffer,'DrawText',text,xpos,ypos,black);		rect=[ xpos ypos-fontsize  xpos+width ypos];		[rw,rh]=rectsize(rect);		rect=insetrect(rect, -round(rw/10), -round(rh/10)); % increase surrounding rect by 10%		object(k).rect=rect;		object(k).on=0;		k=k+1;	endend% Provide Eyelink with details about the graphics environment% and perform some initializations. The information is returned% in a structure that also contains useful defaults% and control codes (e.g. tracker state bit and Eyelink key values).el=initeyelinkdefaults;% modify a few of the default settingsel.backgroundcolour = gray;el.foregroundcolour = white;el.mousetriggersdriftcorr=1;% make sure that we get event data from the Eyelinkeyelink('command', 'file_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON');eyelink('command', 'link_sample_data  = LEFT,RIGHT,GAZE,AREA');eyelink('command', 'link_event_data = GAZE,GAZERES,HREF,AREA,VELOCITY');eyelink('command', 'link_event_filter = LEFT,RIGHT,FIXATION,BLINK,SACCADE,BUTTON');% open file to record data toEYELINK('openfile', 'demo.edf');% Calibrate the eye tracker using the matlab calibration routines% go immediately into eye set up modeerror=dotrackersetup(el, el.ENTER_KEY);	% PERFORM CAMERA SETUP, CALIBRATION, force eye image on screen */lastchoice=-1;choice=-1;if error~=el.TERMINATE_KEY	% do a last-second correction on calibration using driftcorrection	success=dodriftcorrection(el,[],[],1,1);	if success~=1		return;	end	eyelink('setofflinemode');	eyelink('command', 'clear_screen 0');		% put buffer on screen	screen('copywindow', buffer, window);		% start recording eye position	EYELINK('startrecording');	% record a few samples before we actually start displaying	waitsecs(0.1);	% mark zero-plot time in data file	EYELINK('message', 'SYNCTIME');	stopkey=KbName('space');		% adapt display based on END-SACCADE events	while 1 % loop till error or space bar is pressed		% Check recording status, stop display if error		error=EYELINK('checkrecording');		if(error~=0)			break;		end			[keyIsDown,secs,keyCode] = KbCheck; % check for keyboard press		if keyCode(stopkey) % if spacebar was pressed stop display			break;		end			% check for endsaccade events			if eyelink('isconnected') == el.dummyconnected % in dummy mode use mousecoordinates			[x,y,button] = GetMouse( el.window );			evt.type=el.ENDSACC;			evt.genx=x;			evt.geny=y;			evtype=el.ENDSACC;			else % check for events			evtype=eyelink('getnextdatatype');		end		if evtype==el.ENDSACC		% if the subject finished a saccade check if it fell on an object			if eyelink('isconnected') == el.connected % if we're really measuring eye-movements				evt = EYELINK('getfloatdata', evtype); % get data			end			% check if saccade landed on an object			choice=-1;			i=1;			while 1				if 1==IsInRect(evt.genx,evt.geny, object(i).rect )					choice=i;					break;				end				i=i+1;				if i>nobjects					break;				end			end			if lastchoice>0 & choice~=lastchoice % toggle object color				screen( window, 'waitblanking');				if object(lastchoice).on==1 % restore screen					screen('copywindow', buffer, window, object(lastchoice).rect, object(lastchoice).rect);					object(lastchoice).on=0;				end			end			if choice>0 & choice~=lastchoice % toggle object color				if object(choice).on==0 % toggle object on screen					screen('copywindow', altbuffer, window, object(choice).rect, object(choice).rect);					object(choice).on=1;				end				lastchoice=choice;			end		end % saccade?		end % main loop	waitsecs(0.1);	% wait a while to record a few more samples		% finish up: stop recording eye-movements,	% close graphics window, close data file and shut down tracker	EYELINK('stoprecording');end % tracker setup termination checkSCREEN('closeall');EYELINK('closefile');EYELINK('shutdown');