function [key, el]=EyelinkGetKey(el)% USAGE: [key, el]=EyelinkGetKey(el)%%		el: eyelink default values, also stores%           getkeytime (last time this function was used)% matlab version of eyelink supplied getkey() function% we can't call it getkey() as there is already a similar,% function in PsychToolbox% 02-06-01	fwc changed to accept el structure and tickcount value%				which should hold the time at which getkeyforeyelink was used%				last time.% 				key definitions are now set in 'initeyelinkdefaults.m'% 12-01-04  fwc adapted for use with OS X version of psychToolbox%                 replaced tickcount with el.getkeytime, that is%                 stored in el structure. Also max key repetition time is%                 now a parameter (el.getkeyrepeat) set in initeyelinkdefaults.m%                 there's now also a variant that tests%                 for key presses that only uses KbCheck%                 CharAvail fails on OS X so we only test for keypresses using keyIsDown%                 parameter from KbCheck function% 280606    fwc changed name to EyelinkGetKey%               now actually returning char codes rather than true%               characters% excerpt from "exptsppt.h"% ******** KEY SCANNING ********/% some useful keys returned by getkey()                    */% These keys allow remote control of tracker during setup. */% on non-DOS platforms, you should produce these codes and */% all printable (0x20..0x7F) keys codes as well.           */% Return JUNK_KEY (not 0) if untranslatable key pressed.   */% TERMINATE_KEY can be to break out of EXPTSPPT loops.     */% Returns 0 if no key pressed          */% returns a single UINT16 integer code */% for both standard and extended keys  */% Standard keys == ascii value.        */% MSBy is set for extended codes       */usegetchar=0;key=0;if nargin < 1    error( 'USAGE: [key, el]=EyelinkGetKey(el)' );end%if exist('el.getkeytime', 'var') & ~isempty( el.getkeytime )if GetSecs-el.getkeytime<el.getkeyrepeat  % to prevent too rapid repeats of this function?    return;end%end% in original getkey() there was a test for cmd . (call to UserAbort()).% Obsolete within matlab environment as this stops matlab execution completely (on OS 9).% Here we provide an alternative (default is apple-esc).% you can change this by setting el.modifierkey en el.quitkey% specific quitkey defined in 'initeyelinkdefaults.m' file.[keyIsDown,secs,keyCodes] = KbCheck;if keyIsDown==0 % no keypress available    return;endif keyCodes(el.modifierkey) & keyCodes( el.quitkey )    key=el.TERMINATE_KEY;    return;endel.getkeytime=secs;if usegetchar==0 % OS X version, variant 1, using only keyCodes    if ~exist( 'el.keysCached', 'var') | isempty(el.keysCached) | el.keysCached==0     error( 'Please call el=EyelinkInitDefaults before calling EyelinkGetKey' );    end    % first see if any of the special eyelink keys have been pressed    % most of these need to be translated into a special value    % These keys allow remote control of tracker during setup. */    % on non-DOS platforms, you should produce these codes */    if keyCodes(el.uparrow)==1        key=el.CURS_UP;    elseif keyCodes(el.downarrow)==1        key=el.CURS_DOWN;    elseif keyCodes(el.leftarrow)==1        key=el.CURS_LEFT;    elseif keyCodes(el.rightarrow)==1        key=el.CURS_RIGHT;    elseif keyCodes(el.return)==1        key=el.ENTER_KEY;    elseif keyCodes(el.enter)==1        key=el.ENTER_KEY;    elseif keyCodes(158)==1 % Return        key=el.ENTER_KEY;    elseif keyCodes(40)==1 % Return        key=el.ENTER_KEY;    elseif keyCodes(187)==1 % KeypadBackspace        key=el.ENTER_KEY;    elseif keyCodes(el.backspace)==1        key=el.ESC_KEY;    elseif keyCodes(el.escape)==1        key=el.ESC_KEY;    elseif keyCodes(el.pageup)==1        key=el.PAGE_UP;    elseif keyCodes(el.pagedown)==1        key=el.PAGE_DOWN;    elseif keyCodes(el.space)==1        key=el.SPACE_BAR; % returns 32    end    % already found a key response,    if key~=0        return;    end    if 0        key=find(keyCodes); % find keyCodes>0        key=key(1); % take only first one in case more keys were pressed        if (key >=4 & key <=39) | (key >=44 & key <=56) | ...                (key >=84 & key <=87) | (key >=89 & key <=99) | key==103            key=KbName(key(1)); % convert to a character, potential problem: KbName does not translate all keys to actual ascii characters.            key=double(key(1)); % some keyNames have two characters (e.g. 8*);            return;        end    else        % we should produce all printable (0x20..0x7F) keys codes as well.           */        % this is probably enough        key=find(keyCodes); % find keyCodes>0        %     key=key(1); % take only first one in case more keys were pressed        key=KbName(key(1)); % convert to a character, potential problem: KbName does not translate all keys to actual ascii characters.        key=double(key(1)); % some keyNames have two characters (e.g. 8*);        if key >=hex2dec('20') & key < hex2dec('7F') % only return  printable chars (0x20..0x7F)            return;        end    end    %     switch(key(1))  % only use first key that's available.    %         case el.uparrow,    %             key=el.CURS_UP;    %             return;    %         case el.downarrow,    %             key=el.CURS_DOWN;    %             return;    %         case el.leftarrow,    %             key=el.CURS_LEFT;    %             return;    %         case el.rightarrow,    %             key=el.CURS_RIGHT;    %             return;    %         case { el.return, el.enter, 158, 40, 187 } % return and enter (two types of return defined in KbName), KeypadBackspace=187    %             key=el.ENTER_KEY;    %             return;    %         case { el.backspace, el.escape } % backspace and esc    %             key=el.ESC_KEY;    %             return;    %         case el.pageup,  % in the original getkey() function this was in a separate switch (why?)    %             key=el.PAGE_UP;    %             return;    %         case el.pagedown    %             key=el.PAGE_DOWN;    %             return;    %     end    key=el.JUNK_KEY; % return code for untranslatable key    return;else % variant 2, using getchar    c=double(GetChar); % can't remember why I converted to a double, leave it for now    if c>=hex2dec('20') & c<=hex2dec('7F') % ascii values between 32 and 127        key=c;        return;    end    switch(c)        case hex2dec('1E'),            key=el.CURS_UP;            return;        case hex2dec('1F'),            key=el.CURS_DOWN;            return;        case hex2dec('1C'),            key=el.CURS_LEFT;            return;        case hex2dec('1D'),            key=el.CURS_RIGHT;            return;        case { hex2dec('0D'), hex2dec('03') } % return and enter            key=el.ENTER_KEY;            return;        case { hex2dec('08'), hex2dec('1B') } % backspace and esc            key=el.ESC_KEY;            return;        case hex2dec('0B'),            key=el.PAGE_UP;            return;        case hex2dec('0C')            key=el.PAGE_DOWN;            return;            % this bit of code from original getkey() function appears useless            % at least on the mac        case hex2dec('740B'),            key=el.PAGE_UP;            return;        case hex2dec('790C')            key=el.PAGE_DOWN;            return;    end    key=el.JUNK_KEY; % return code for untranslatable key    return;end