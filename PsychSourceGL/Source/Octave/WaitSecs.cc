// This C++ file is the interface between GNU/Octave and Psychtoolbox
// module WaitSecs. It defines the entry-point function FWaitSecs and the online
// help for WaitSecs. The function itself (see bottom of file) is just a
// wrapper around octFunction(), the real command dispatcher defined in
// the PsychScriptingGlue.cc file.
// This file is autogenerated, please do not edit!
//

#ifdef PTBOCTAVE
#define PTBMODULE_WaitSecs
#include <octave/oct.h>

extern "C" {
  // mex.cc names both mexFunction (c) and MEXFUNCTION (Fortran)
  // but the mex file only defines one of them, so define the other
  // here just to keep the linker happy, but don't ever call it.
  void F77_FUNC(mexfunction,MEXFUNCTION)() {}
  const char *mexFunctionName = "WaitSecs";
} ;

DEFUN_DLD(WaitSecs, args, nargout,
"\
 WaitSecs(s)\n\
\n\
 Waits \"s\" seconds with high precision.  The timing precision  depends on\n\
 the model of your computer, use GetSecsTick to report the  precision for\n\
 your computer.  \n\
 \n\
 WaitSecs(s) is similar to Matlab's built-in PAUSE(s) command. The\n\
 advantage of WaitSecs(s) is that it is much more accurate, and can be\n\
 aborted by hitting Command-Period. However, PAUSE can be turned 'ON' and\n\
 'OFF', which is useful for scripts.\n\
 \n\
 TIMING ADVICE: the first time you access any MEX function or M file,\n\
 Matlab takes several hundred milliseconds to load it from disk.\n\
 Allocating a variable takes time too. Usually you'll want to omit those\n\
 delays from your timing measurements by making sure all the functions you\n\
 use are loaded and that all the variables you use are allocated, before\n\
 you start timing. MEX files stay loaded until you flush the MEX files\n\
 (e.g. by changing directory or calling CLEAR MEX). M files and variables\n\
 stay in memory until you clear them.\n\
\n\
 OS X: ___________________________________________________________________\n\
\n\
 WaitSecs always uses the high-precision uptime clock.  It sleeps the main\n\
 MATLAB thread for the given wait period, surrendering CPU time to other\n\
 processes while waiting.  WaitSecs is now safe to use at any priority\n\
 setting.  \n\
\n\
 WaitSecs ignores the OX MATLAB <ctrl>-C break key sequenece.\n\
\n\
 OS 9: ___________________________________________________________________\n\
\n\
 Uses the extremely accurate PowerPC processor clock if the UpTime trap is\n\
 available (PowerMac  with Mac OS 8.6 or better). Otherwise uses the Time\n\
 Manager's Microseconds trap. The Time Manager seems to lose time when\n\
 interrupts are suppressed, whereas UpTime is unaffected.\n\
\n\
 GetSecs, WaitSecs, and several other MEX files use the VideoToolbox\n\
 Seconds.c function as their timebase. Seconds.c uses the Mac OS UpTime\n\
 trap if available. This trap is based on a hardware counter in the\n\
 PowerPC processor, which provides extremely stable reliable timing.\n\
 However, the Mac OS conversion from a count to a time uses an\n\
 Apple-supplied conversion factor that is only accurate to about 1%. To\n\
 make your timing more accurate you can scale all values returned by\n\
 Seconds.c by setting the scale factor different from 1 in Screen\n\
 Preference SecondsMultiplier. Run GetSecsTest to do this automatically.\n\
\n\
 WINDOWS:_________________________________________________________________\n\
\n\
 WaitSecs uses  Windows QueryPerformanceCounter() call which, in turn, \n\
 reads a high-performance hardware counter in Pentium and better CPUs.\n\
\n\
 WaitSecs ignores the Win MATLAB <ctrl>-C break key sequenece.\n\
\n\
 _________________________________________________________________________\n\
 \n\
 See also: GetSecs, GetSecsTick, GetTicks, WaitTicks, PAUSE.\n\
")
{
  octave_value_list octFunction(const octave_value_list &, const int);
  return octFunction(args, nargout);
}
#endif

